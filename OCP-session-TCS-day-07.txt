OCP-session-Jenkins implementation:-

RHOCP - S2I Feature (Source to Image) - Later deploying application while deploying same build image. 
# Deploying Jenkins on OpenShift 

 CI/CD workflow  - Developer 
 GitOps Workflow - Admin related 
Both take inputs from SCM (Git repo).

 1) Deploying jenkins on RHOCP (OpenShift) using standard templates and images streams (IS).
 2) Deploying CI/CD development pipeline on Jenkins.
 3) Managing jenkins projects and builds using jenkins web UI.
 4) Create API token for scripts that automates jenkins env.


###1) Jenkins images and templates for OpenShift.
  
 Provide RH support on mentioned jenkins images and templates for OCP.
 1. registry.redhat.io/openshuft4/oce-jenkins - Jenkins master image ( Pre-configured with jenkins plug-ins and these plus-ins integrate with OpenShift).
 
 2. regisyry.redhat.io/openshift4/ose-jenkins-agent-maven (Jenkins agent image - Provides JAVA development).
 
 3. registry.redhat.io/openshift4/ose-jenkins-agent-nodejs (Jenkins agent image - Provides nodejs development tools).
 
 4. registry.redhat.io/openshift4/ose-jenkins-agent-base (Base image ).
 
 While deploying jenkins using pre-defined templates 
 - Jenkins-emphemeral 
 - Jenkins presistent 

 - Jenkins Plug-ins for OCP 
   - Kubernetes plug-in - Creating agent on-demands as POD.
   - Kubernetes Credentials plugin - Authenticaties to OCP using service account (SA).
   - OpenShift sync Plug-ins - 
     Creating jenkins credenatials, accounts and agent from OpenShift image streams, CM, SA and secret.
   - OpenShift Jenkins pipeline DSL
   
#########################################
 1) Deploying jenkins on RHOCP (OpenShift) using standard templates and images streams (IS).
 2) Deploying CI/CD development pipeline on Jenkins.
 3) Managing jenkins projects and builds using jenkins web UI.
 4) Create API token for scripts that automates jenkins env.
 
 Step 1) . 
   - Login to OCP cluster as normal user (Not cluster-admin). 
   - Create emply git repo  and clone it to your system.
   - commit the same - https://github.com/cprakash2118/gitops-deploy
   - namespace created (gitops-deploy)
   -oc get template -n openshift | grep jenkins 
   
   NOte: All templates and images from namespace "openshift" 
   4 templates - 
     - 2 jenkins-ephemeral/jenkins-persistent 
     - 2 jenkins-ephemeral-monitored/jenkins-persistent-monitored
	 
List the parameters:-
oc process jenkins-persistent --parameters -n openshift 


- Deploy the template using new-app 
 oc new-app --template jenkins-persistent
 ==================
 I will continue on this page (As above Pipeline workflow did't worked)
 
 ##################################
 1) Deploying jenkins on RHOCP (OpenShift) using standard templates and images streams (IS).
 
 Step 1) Login to OCP via normal account (RBAC = edit/admin - specific to project).
 
      developer/developer (edit/admin access via htpasswd - (namespace=getops-deploy).
	  admin/redhat (cluster-admin via htpasswd)
   
 Step 2) Login to github (https://githib.com) and create public repository.
    https://github.com/cprakash2118/gitops-deploy
	

 Step 3) Updated/commited below files to above git repo (gitops-deploy).

   	jenkinsfile 
	app.js
	package.json 

  Explanation:
    jenkinsfile - (Defined workflow stages - Create --> build --> deploy --> test --> Final Outcome).  
     app.js     - application 
	 package.json - supportive files (provides input to application).
	 
 Step 4) Listing jenkins standard templates.
     $ oc get template -n openshift | grep -w ^jenkins 
	 jenkins-ephemeral 
	 jenkins-presistent 
	 
    Note: 
	  $ oc get template jenkins-presistent -n openshift -o yaml > jenkins-presistent-file.yaml 
	  
	  
  Step 5) Listing the parameters of jenkins temaplate 
    $ oc process jenkins-persistents --parameters -n openshift.
	
  Step 6) Deploying jenkins pipeline using temaplte (jenkins-persistents).
     $ oc new-app --template jenkins-persistent -p JENKINS_IMAGE_STREAM_TAG=jenkins:v4.8
	 
	 $ oc get all (pod, svc, route, is)
	 
	 $ oc project -q 
	 $ oc create serviceaccount jenkins 
     $ oc adm policy add-cluster-roles-user self-provisinor -z jenkins -n <current namespace > (-n gitops-deploy).

     $ oc get pods  (Check pods and verify the jenkins deployment).
     $ oc logs jenkins-1-jdsakl	(pod name).
     NOte: "Up and running"

     Now login to Jenkins dashboad using openshift 
   Then create multibranch pipeline project for the application (github.com/cprakash/gitops-deploy).


   Verify your jobs master node.
     $ oc get pods
	 
	 Apps running on mentioned application (npdejs or java based).
	 

###########################################################################
 Configure OpenShift using GitOps and Jenkins:-
 - Creating jenkins pipeline that applies htpasswd identity provider settting and RBAC permission from YAML in a git repository.


https://github.com/cprakash2118/gitops-gitops

 - login to OCP cluster using htpasswd 
  Step-1 ) Create user's credentials file via htpasswd utility (htpasswd-upload-file)
       admin:weidjskdfhjksdfjlksdlk
	   developer01:kasjhdkjsahdjkashk
	   developer02:jhgashgdjhasgdjsa
	   testuser1:aksjdhjksahdkja
	   testuser2:kasjdhskjahdskja
  
  Step 2) Create secret (type = generic) (namespace=openshift-config)
 
  Step 3) Edit and update oauth resource (oc get oauth/cluster -o yaml > oauth_file.yaml ).
          oc replace -f oauth_file.yaml 
  Step 4)  Login to cluster using above account.
         $ oc login -u testuser1  -p redhat api_url  
	   
 
https://github.com/cprakash2118/gitops-gitops

  config   (Related to configuration operations).
  
  oauth.yaml   - oauth cluster authentication service 
  htpasswd-secret-data   - User's credentials
  project-leasder.yaml   - Project leader groups and memebers.
  self-provisioners.yaml - Create projects 
  kustomization.yaml - It will generate htpasswd secret.  
  
  POD (Application)
  SVC 
  DC (Deploy apps)
  BC (Create Build)
  =======================
  
  git clone https://github.com/cprakash2118/gitops-gitops
  
  Login as cluster-admin (admin)
  oc login -u admin -p password API_URL 
  
  Note: Switch to gitops-deploy projects (In this project we have implemented Jenkins pipelines).

  This OCP configuration can be consider as application (Make changes on configration part).
  
  deployment (Along with - nodejs jenkins master node also).
  
  Access to jenkins:-
  oc get route -n gitops-deploy 
  
  #########################################################################################
  
  Configuring Trusted TLS certificate.
  - Change the wildcard certificate used by the ingress controller operator 
  - Configure an application to use the trusted certificate bundle.
  - Describe/Explanation of common issues with respect to OCP certificate 
  
  Example: re-encryption (Edge & Passthrough - Mounting certificate to POD) 
  
  
  COnfigure Enterprise Authentication (Open LDAP or IPA or AD).
  - Configure OCP to authenticate using an LDAP user Credentials
  - Automate group sync with LDAP.
  
  
  
  
	
	
    
   